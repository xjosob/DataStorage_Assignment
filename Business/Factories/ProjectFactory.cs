using Business.Helpers;
using Business.Interfaces;
using Business.Models;
using Data.Contexts;
using Data.Entities;
using Microsoft.EntityFrameworkCore;

namespace Business.Factories
{
    public class ProjectFactory(DataContext context, IUserService userService)
    {
        private readonly IUserService _userService =
            userService ?? throw new ArgumentNullException(nameof(userService));
        private readonly DataContext _context =
            context ?? throw new ArgumentNullException(nameof(context));
        private readonly ProjectIdGeneratorHelper _projectIdGeneratorHelper = new(context);

        public async Task<ProjectEntity> CreateAsync(ProjectCreationForm form)
        {
            #region // Validation generated by ChatGPT. Checks if status exists.
            var status =
                await _context.Set<StatusTypes>().FirstOrDefaultAsync(s => s.Id == form.StatusId)
                ?? throw new InvalidOperationException(
                    $"Status with ID {form.StatusId} not found."
                );

            string projectId = await _projectIdGeneratorHelper.GenerateUniqueProjectIdAsync();
            #endregion

            var product =
                await _context.Products.FirstOrDefaultAsync(p => p.Id == form.ProductId)
                ?? throw new InvalidOperationException(
                    $"Product with ID {form.ProductId} not found."
                );

            var user =
                await _userService.GetUserByIdAsync(form.UserId)
                ?? throw new InvalidOperationException($"User with ID {form.UserId} not found.");

            return new ProjectEntity
            {
                Id = projectId,
                ProjectName = form.ProjectName,
                ProjectDescription = form.ProjectDescription,
                StartDate = form.StartDate,
                EndDate = form.EndDate,
                CustomerId = form.CustomerId,
                StatusId = form.StatusId,
                Status = status,
                Product = product,
                User = user,
            };
        }
    }
}
